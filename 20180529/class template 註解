----------------------------------------------------------------------------StackOfIntegers.h
#ifndef STACK_H
#define STACK_H

class StackOfIntegers            //類別名稱 
{
public:                       //公開::可以被存取 
  StackOfIntegers();          //建構子 
  bool isEmpty() const;       // 測試是否為空的函數 
  int peek() const;           //取出最上面元素的函數 
  void push(int value);       //  把資料丟入的函數   
  int pop();                  // 取出最上面資料的函數 
  int getSize() const;         // 取出堆疊大小的函數 

private:                       // 1.把資料隱藏起來  2.使用上述的公開函數來存取 
  int elements[100];          //整數類型的大小  大小為一百 
  int size;                   //整數類型的大小 
};

#endif

-----------------------------------------------------------StackOfIntegers.cpp
#include "StackOfIntegers.h"

StackOfIntegers::StackOfIntegers()   //類別的建構子的實作 
{
  size = 0;  //產生大小為零的stackofintegers物件 
}

bool StackOfIntegers::isEmpty() const //測試是否為空的實作 
{    //此函數執行後回傳的值為布林，真或假 
  return (size == 0);    //判斷式size == 0 若大小為零則回傳假;若大小不為零則回傳真 
}

int StackOfIntegers::peek() const    //取出最上層資料的實作 
{
  return elements[size - 1];
}

void StackOfIntegers::push(int value)
{
  elements[size++] = value;
}

int StackOfIntegers::pop()
{
  return elements[--size];
}

int StackOfIntegers::getSize() const
{
  return size;
}

--------------------------------------------------------TestStackOfIntegers.cpp

#include <iostream>
#include "StackOfIntegers.h"
using namespace std;

int main()
{
  StackOfIntegers stack;

  for (int i = 0; i < 10; i++)
    stack.push(i);

  while (!stack.isEmpty())
    cout << stack.pop() << " ";

  return 0;
}








